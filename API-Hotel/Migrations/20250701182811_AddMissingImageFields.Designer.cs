// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using hotel.Data;

#nullable disable

namespace hotel.Migrations
{
    [DbContext(typeof(HotelDbContext))]
    [Migration("20250701182811_AddMissingImageFields")]
    partial class AddMissingImageFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("hotel.Models.Acompanantes", b =>
                {
                    b.Property<int>("AcompananteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcompananteId"));

                    b.Property<string>("DocumentoIdentidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InstitucionId")
                        .HasColumnType("int");

                    b.Property<int?>("InstitucionId1")
                        .HasColumnType("int");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parentesco")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcompananteId");

                    b.HasIndex("InstitucionId");

                    b.HasIndex("InstitucionId1");

                    b.ToTable("Acompanantes");
                });

            modelBuilder.Entity("hotel.Models.Articulos", b =>
                {
                    b.Property<int>("ArticuloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticuloId"));

                    b.Property<bool?>("Anulado")
                        .HasColumnType("bit");

                    b.Property<int?>("CategoriaID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstitucionID")
                        .HasColumnType("int");

                    b.Property<string>("NombreArticulo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int?>("imagenID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ArticuloId");

                    b.HasIndex("imagenID");

                    b.ToTable("Articulos");
                });

            modelBuilder.Entity("hotel.Models.Caracteristica", b =>
                {
                    b.Property<int>("CaracteristicaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaracteristicaId"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Icono")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CaracteristicaId");

                    b.HasIndex("Nombre")
                        .HasDatabaseName("IX_Caracteristicas_Nombre");

                    b.ToTable("Caracteristicas", (string)null);
                });

            modelBuilder.Entity("hotel.Models.CategoriasArticulos", b =>
                {
                    b.Property<int>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoriaId"));

                    b.Property<bool?>("Anulado")
                        .HasColumnType("bit");

                    b.Property<int>("InstitucionID")
                        .HasColumnType("int");

                    b.Property<string>("NombreCategoria")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoriaId");

                    b.ToTable("CategoriasArticulos");
                });

            modelBuilder.Entity("hotel.Models.CategoriasHabitaciones", b =>
                {
                    b.Property<int>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoriaId"));

                    b.Property<bool?>("Anulado")
                        .HasColumnType("bit");

                    b.Property<int?>("CapacidadMaxima")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstitucionID")
                        .HasColumnType("int");

                    b.Property<string>("NombreCategoria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PorcentajeXPersona")
                        .HasColumnType("int");

                    b.Property<decimal?>("PrecioNormal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("CategoriaId");

                    b.ToTable("CategoriasHabitaciones");
                });

            modelBuilder.Entity("hotel.Models.Cierre", b =>
                {
                    b.Property<int>("CierreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CierreId"));

                    b.Property<bool?>("EstadoCierre")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaHoraCierre")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstitucionID")
                        .HasColumnType("int");

                    b.Property<decimal?>("MontoInicialCaja")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalIngresosBillVirt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalIngresosEfectivo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalIngresosTarjeta")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("CierreId");

                    b.HasIndex("InstitucionID");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Cierre");
                });

            modelBuilder.Entity("hotel.Models.Configuracion", b =>
                {
                    b.Property<int>("ConfiguracionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConfiguracionId"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Categoria")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InstitucionId")
                        .HasColumnType("int");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ConfiguracionId")
                        .HasName("PK_Configuracion");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Configuracion_Activo");

                    b.HasIndex("Categoria")
                        .HasDatabaseName("IX_Configuracion_Categoria");

                    b.HasIndex("InstitucionId");

                    b.HasIndex("Clave", "InstitucionId")
                        .IsUnique()
                        .HasDatabaseName("IX_Configuracion_Clave_InstitucionId")
                        .HasFilter("[InstitucionId] IS NOT NULL");

                    b.ToTable("Configuracion", (string)null);
                });

            modelBuilder.Entity("hotel.Models.Consumo", b =>
                {
                    b.Property<int>("ConsumoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsumoId"));

                    b.Property<bool?>("Anulado")
                        .HasColumnType("bit");

                    b.Property<int?>("ArticuloId")
                        .HasColumnType("int");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<bool?>("EsHabitacion")
                        .HasColumnType("bit");

                    b.Property<int?>("MovimientosId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PrecioUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ConsumoId");

                    b.HasIndex("ArticuloId");

                    b.HasIndex("MovimientosId");

                    b.ToTable("Consumo");
                });

            modelBuilder.Entity("hotel.Models.CuadreCierre", b =>
                {
                    b.Property<int>("CuadreCierreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CuadreCierreId"));

                    b.Property<int?>("CierreId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InstitucionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TipoMovimiento")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CuadreCierreId");

                    b.HasIndex("CierreId");

                    b.HasIndex("InstitucionId");

                    b.ToTable("CuadreCierre");
                });

            modelBuilder.Entity("hotel.Models.DescuentoEfectivo", b =>
                {
                    b.Property<int>("DescuentoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DescuentoID"));

                    b.Property<int>("InstitucionID")
                        .HasColumnType("int");

                    b.Property<int>("MontoPorcentual")
                        .HasColumnType("int");

                    b.HasKey("DescuentoID");

                    b.ToTable("DescuentoEfectivo");
                });

            modelBuilder.Entity("hotel.Models.DiasSemana", b =>
                {
                    b.Property<int>("DiaSemanaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiaSemanaId"));

                    b.Property<string>("NombreDiaSemana")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiaSemanaId");

                    b.ToTable("DiasSemana");
                });

            modelBuilder.Entity("hotel.Models.Egresos", b =>
                {
                    b.Property<int>("EgresoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EgresoId"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int?>("CierreID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstitucionID")
                        .HasColumnType("int");

                    b.Property<int?>("MovimientoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TipoEgresoId")
                        .HasColumnType("int");

                    b.HasKey("EgresoId");

                    b.HasIndex("CierreID");

                    b.HasIndex("MovimientoId")
                        .IsUnique()
                        .HasFilter("[MovimientoId] IS NOT NULL");

                    b.HasIndex("TipoEgresoId");

                    b.ToTable("Egresos");
                });

            modelBuilder.Entity("hotel.Models.Empeño", b =>
                {
                    b.Property<int>("EmpeñoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpeñoID"));

                    b.Property<bool?>("Anulado")
                        .HasColumnType("bit");

                    b.Property<string>("Detalle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstitucionID")
                        .HasColumnType("int");

                    b.Property<double>("Monto")
                        .HasColumnType("float");

                    b.Property<int?>("PagoID")
                        .HasColumnType("int");

                    b.Property<int>("VisitaID")
                        .HasColumnType("int");

                    b.HasKey("EmpeñoID");

                    b.HasIndex("PagoID");

                    b.HasIndex("VisitaID");

                    b.ToTable("Empeño");
                });

            modelBuilder.Entity("hotel.Models.Encargos", b =>
                {
                    b.Property<int>("EncargosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EncargosId"));

                    b.Property<bool?>("Anulado")
                        .HasColumnType("bit");

                    b.Property<int?>("ArticuloId")
                        .HasColumnType("int");

                    b.Property<int?>("CantidadArt")
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Entregado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaCrea")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InstitucionId")
                        .HasColumnType("int");

                    b.Property<int?>("VisitaId")
                        .HasColumnType("int");

                    b.HasKey("EncargosId");

                    b.HasIndex("ArticuloId");

                    b.HasIndex("InstitucionId");

                    b.HasIndex("VisitaId");

                    b.ToTable("Encargos");
                });

            modelBuilder.Entity("hotel.Models.HabitacionCaracteristica", b =>
                {
                    b.Property<int>("HabitacionId")
                        .HasColumnType("int");

                    b.Property<int>("CaracteristicaId")
                        .HasColumnType("int");

                    b.HasKey("HabitacionId", "CaracteristicaId");

                    b.HasIndex("CaracteristicaId")
                        .HasDatabaseName("IX_HabitacionCaracteristicas_CaracteristicaId");

                    b.HasIndex("HabitacionId")
                        .HasDatabaseName("IX_HabitacionCaracteristicas_HabitacionId");

                    b.ToTable("HabitacionCaracteristicas", (string)null);
                });

            modelBuilder.Entity("hotel.Models.HabitacionImagenes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Anulado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("EsPrincipal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("HabitacionId")
                        .HasColumnType("int")
                        .HasColumnName("HabitacionID");

                    b.Property<int>("ImagenId")
                        .HasColumnType("int")
                        .HasColumnName("ImagenID");

                    b.Property<int>("Orden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Anulado")
                        .HasDatabaseName("IX_HabitacionImagenes_Anulado");

                    b.HasIndex("EsPrincipal")
                        .HasDatabaseName("IX_HabitacionImagenes_EsPrincipal");

                    b.HasIndex("HabitacionId")
                        .HasDatabaseName("IX_HabitacionImagenes_HabitacionId");

                    b.HasIndex("ImagenId")
                        .HasDatabaseName("IX_HabitacionImagenes_ImagenId");

                    b.HasIndex("Orden")
                        .HasDatabaseName("IX_HabitacionImagenes_Orden");

                    b.ToTable("HabitacionImagenes", (string)null);
                });

            modelBuilder.Entity("hotel.Models.Habitaciones", b =>
                {
                    b.Property<int>("HabitacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HabitacionId"));

                    b.Property<bool?>("Anulado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<bool?>("Disponible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("InstitucionID")
                        .HasColumnType("int");

                    b.Property<string>("NombreHabitacion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ProximaReserva")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int?>("VisitaID")
                        .HasColumnType("int");

                    b.HasKey("HabitacionId");

                    b.HasIndex("Anulado")
                        .HasDatabaseName("IX_Habitaciones_Anulado");

                    b.HasIndex("CategoriaId")
                        .HasDatabaseName("IX_Habitaciones_CategoriaId");

                    b.HasIndex("Disponible")
                        .HasDatabaseName("IX_Habitaciones_Disponible");

                    b.HasIndex("InstitucionID")
                        .HasDatabaseName("IX_Habitaciones_InstitucionID");

                    b.HasIndex("VisitaID")
                        .IsUnique()
                        .HasDatabaseName("IX_Habitaciones_VisitaID")
                        .HasFilter("[VisitaID] IS NOT NULL");

                    b.HasIndex("InstitucionID", "Disponible", "Anulado")
                        .HasDatabaseName("IX_Habitaciones_InstitucionID_Disponible_Anulado");

                    b.ToTable("Habitaciones", (string)null);
                });

            modelBuilder.Entity("hotel.Models.HabitacionesVirtuales", b =>
                {
                    b.Property<int>("HabitacionVirtualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HabitacionVirtualId"));

                    b.Property<bool?>("Anulado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Habitacion1Id")
                        .HasColumnType("int");

                    b.Property<int?>("Habitacion2Id")
                        .HasColumnType("int");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("HabitacionVirtualId");

                    b.HasIndex("Habitacion1Id");

                    b.HasIndex("Habitacion2Id");

                    b.ToTable("HabitacionesVirtuales");
                });

            modelBuilder.Entity("hotel.Models.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("hotel.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForcePasswordChange")
                        .HasColumnType("bit");

                    b.Property<int?>("InstitucionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LegacyUserId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("InstitucionId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("hotel.Models.Imagenes", b =>
                {
                    b.Property<int>("ImagenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("imagenID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImagenId"));

                    b.Property<DateTime>("FechaSubida")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstitucionID")
                        .HasColumnType("int");

                    b.Property<string>("NombreArchivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Origen")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ImagenId");

                    b.HasIndex("NombreArchivo")
                        .HasDatabaseName("IX_Imagenes_NombreArchivo");

                    b.ToTable("Imagenes", (string)null);
                });

            modelBuilder.Entity("hotel.Models.Institucion", b =>
                {
                    b.Property<int>("InstitucionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstitucionId"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaAnulado")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TipoID")
                        .HasColumnType("int");

                    b.HasKey("InstitucionId");

                    b.ToTable("Instituciones", (string)null);
                });

            modelBuilder.Entity("hotel.Models.InventarioGeneral", b =>
                {
                    b.Property<int>("InventarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventarioId"));

                    b.Property<bool?>("Anulado")
                        .HasColumnType("bit");

                    b.Property<int?>("ArticuloId")
                        .HasColumnType("int");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstitucionID")
                        .HasColumnType("int");

                    b.HasKey("InventarioId");

                    b.HasIndex("ArticuloId");

                    b.ToTable("InventarioGeneral");
                });

            modelBuilder.Entity("hotel.Models.InventarioInicial", b =>
                {
                    b.Property<int>("ArticuloId")
                        .HasColumnType("int");

                    b.Property<bool?>("Anulado")
                        .HasColumnType("bit");

                    b.Property<int?>("CantidadInicial")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InstitucionId")
                        .HasColumnType("int");

                    b.HasKey("ArticuloId");

                    b.HasIndex("InstitucionId");

                    b.ToTable("InventarioInicial");
                });

            modelBuilder.Entity("hotel.Models.Inventarios", b =>
                {
                    b.Property<int>("InventarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventarioId"));

                    b.Property<bool?>("Anulado")
                        .HasColumnType("bit");

                    b.Property<int?>("ArticuloId")
                        .HasColumnType("int");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HabitacionId")
                        .HasColumnType("int");

                    b.Property<int>("InstitucionID")
                        .HasColumnType("int");

                    b.HasKey("InventarioId");

                    b.HasIndex("ArticuloId");

                    b.HasIndex("HabitacionId");

                    b.HasIndex("InstitucionID");

                    b.ToTable("Inventarios");
                });

            modelBuilder.Entity("hotel.Models.MediosPago", b =>
                {
                    b.Property<int>("MedioPagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedioPagoId"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedioPagoId");

                    b.ToTable("MediosPago");
                });

            modelBuilder.Entity("hotel.Models.Movimientos", b =>
                {
                    b.Property<int>("MovimientosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovimientosId"));

                    b.Property<bool?>("Anulado")
                        .HasColumnType("bit");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HabitacionId")
                        .HasColumnType("int");

                    b.Property<int>("InstitucionID")
                        .HasColumnType("int");

                    b.Property<int?>("PagoId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalFacturado")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TotalHoras")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int?>("VisitaId")
                        .HasColumnType("int");

                    b.HasKey("MovimientosId");

                    b.HasIndex("HabitacionId");

                    b.HasIndex("PagoId");

                    b.HasIndex("VisitaId");

                    b.ToTable("Movimientos");
                });

            modelBuilder.Entity("hotel.Models.MovimientosServicios", b =>
                {
                    b.Property<int>("MovimientosServicioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovimientosServicioId"));

                    b.Property<bool?>("Anulado")
                        .HasColumnType("bit");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MovimientosId")
                        .HasColumnType("int");

                    b.Property<int?>("ServicioId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiciosServicioId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("MovimientosServicioId");

                    b.HasIndex("MovimientosId");

                    b.HasIndex("ServicioId");

                    b.HasIndex("ServiciosServicioId");

                    b.ToTable("MovimientosServicios");
                });

            modelBuilder.Entity("hotel.Models.MovimientosStock", b =>
                {
                    b.Property<int>("MovimientoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovimientoId"));

                    b.Property<bool?>("Anulado")
                        .HasColumnType("bit");

                    b.Property<int?>("ArticuloId")
                        .HasColumnType("int");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaMovimiento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MovimientosId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoMovimientoId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("MovimientoId");

                    b.HasIndex("ArticuloId");

                    b.HasIndex("MovimientosId");

                    b.HasIndex("TipoMovimientoId");

                    b.ToTable("MovimientosStock");
                });

            modelBuilder.Entity("hotel.Models.MovimientosUsuarios", b =>
                {
                    b.Property<int>("MovimientoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.HasKey("MovimientoId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("MovimientosUsuarios");
                });

            modelBuilder.Entity("hotel.Models.Pagos", b =>
                {
                    b.Property<int>("PagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PagoId"));

                    b.Property<decimal?>("Adicional")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CierreId")
                        .HasColumnType("int");

                    b.Property<int>("InstitucionID")
                        .HasColumnType("int");

                    b.Property<int?>("MedioPagoId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MontoBillVirt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MontoDescuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MontoEfectivo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MontoTarjeta")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Observacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TarjetaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("fechaHora")
                        .HasColumnType("datetime2");

                    b.HasKey("PagoId");

                    b.HasIndex("CierreId");

                    b.HasIndex("InstitucionID");

                    b.HasIndex("MedioPagoId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("hotel.Models.Personal", b =>
                {
                    b.Property<int>("PersonalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonalId"));

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("PersonalId");

                    b.HasIndex("RolId");

                    b.ToTable("Personal");
                });

            modelBuilder.Entity("hotel.Models.Promociones", b =>
                {
                    b.Property<int>("PromocionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromocionID"));

                    b.Property<bool?>("Anulado")
                        .HasColumnType("bit");

                    b.Property<int>("CantidadHoras")
                        .HasColumnType("int");

                    b.Property<int>("CategoriaID")
                        .HasColumnType("int");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstitucionID")
                        .HasColumnType("int");

                    b.Property<decimal>("Tarifa")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PromocionID");

                    b.HasIndex("CategoriaID");

                    b.ToTable("Promociones");
                });

            modelBuilder.Entity("hotel.Models.Recargos", b =>
                {
                    b.Property<int>("RecargoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecargoID"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PagoID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RecargoID");

                    b.HasIndex("PagoID")
                        .IsUnique();

                    b.ToTable("Recargos");
                });

            modelBuilder.Entity("hotel.Models.Registros", b =>
                {
                    b.Property<int>("RegistroID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistroID"));

                    b.Property<int>("ReservaId")
                        .HasColumnType("int");

                    b.HasKey("RegistroID");

                    b.HasIndex("ReservaId");

                    b.ToTable("Registros");
                });

            modelBuilder.Entity("hotel.Models.Reservas", b =>
                {
                    b.Property<int>("ReservaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservaId"));

                    b.Property<DateTime?>("FechaAnula")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaReserva")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HabitacionId")
                        .HasColumnType("int");

                    b.Property<int>("InstitucionID")
                        .HasColumnType("int");

                    b.Property<int?>("MovimientoId")
                        .HasColumnType("int");

                    b.Property<int?>("PausaHoras")
                        .HasColumnType("int");

                    b.Property<int?>("PausaMinutos")
                        .HasColumnType("int");

                    b.Property<int?>("PromocionId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalHoras")
                        .HasColumnType("int");

                    b.Property<int?>("TotalMinutos")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int?>("VisitaId")
                        .HasColumnType("int");

                    b.HasKey("ReservaId");

                    b.HasIndex("HabitacionId");

                    b.HasIndex("InstitucionID");

                    b.HasIndex("PromocionId");

                    b.HasIndex("VisitaId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("hotel.Models.Roles", b =>
                {
                    b.Property<int>("RolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolId"));

                    b.Property<string>("NombreRol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RolId");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("hotel.Models.Servicios", b =>
                {
                    b.Property<int>("ServicioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicioId"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Categoria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreServicio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ServicioId");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("hotel.Models.ServiciosAdicionales", b =>
                {
                    b.Property<int>("ServicioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicioId"));

                    b.Property<bool?>("Anulado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreServicio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("ServicioId");

                    b.ToTable("ServiciosAdicionales");
                });

            modelBuilder.Entity("hotel.Models.Tarifas", b =>
                {
                    b.Property<int>("TarifaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TarifaId"));

                    b.Property<bool?>("Anulado")
                        .HasColumnType("bit");

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("DetalleTarifa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiaSemanaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("HoraFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TipoTarifaId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("TarifaId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("DiaSemanaId");

                    b.HasIndex("TipoTarifaId");

                    b.ToTable("Tarifas");
                });

            modelBuilder.Entity("hotel.Models.Tarjetas", b =>
                {
                    b.Property<int>("TarjetaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TarjetaID"));

                    b.Property<int>("InstitucionID")
                        .HasColumnType("int");

                    b.Property<int>("MontoPorcentual")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TarjetaID");

                    b.ToTable("Tarjetas");
                });

            modelBuilder.Entity("hotel.Models.TipoEgreso", b =>
                {
                    b.Property<int>("TipoEgresoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoEgresoId"));

                    b.Property<int>("InstitucionID")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipoEgresoId");

                    b.ToTable("TipoEgreso");
                });

            modelBuilder.Entity("hotel.Models.TipoMovimiento", b =>
                {
                    b.Property<int>("TipoMovimientoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoMovimientoId"));

                    b.Property<bool?>("Anulado")
                        .HasColumnType("bit");

                    b.Property<string>("NombreTipoMovimiento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipoMovimientoId");

                    b.ToTable("TipoMovimiento");
                });

            modelBuilder.Entity("hotel.Models.TipoTarifa", b =>
                {
                    b.Property<int>("TipoTarifaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoTarifaId"));

                    b.Property<bool?>("Anulado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreTipoTarifa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("TipoTarifaId");

                    b.ToTable("TipoTarifa");
                });

            modelBuilder.Entity("hotel.Models.Usuarios", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioId"));

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId");

                    b.HasIndex("RolId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("hotel.Models.UsuariosInstituciones", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioId");

                    b.Property<int>("InstitucionID")
                        .HasColumnType("int")
                        .HasColumnName("InstitucionID");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UsuarioId", "InstitucionID");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("InstitucionID");

                    b.ToTable("UsuariosInstituciones", (string)null);
                });

            modelBuilder.Entity("hotel.Models.Visitas", b =>
                {
                    b.Property<int>("VisitaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitaId"));

                    b.Property<bool>("Anulado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaPrimerIngreso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HabitacionId")
                        .HasColumnType("int");

                    b.Property<int?>("HabitacionesHabitacionId")
                        .HasColumnType("int");

                    b.Property<string>("Identificador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstitucionID")
                        .HasColumnType("int");

                    b.Property<string>("NumeroTelefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatenteVehiculo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("VisitaId");

                    b.HasIndex("HabitacionesHabitacionId");

                    b.HasIndex("InstitucionID");

                    b.ToTable("Visitas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("hotel.Models.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("hotel.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("hotel.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("hotel.Models.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hotel.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("hotel.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hotel.Models.Acompanantes", b =>
                {
                    b.HasOne("hotel.Models.Institucion", "Institucion")
                        .WithMany()
                        .HasForeignKey("InstitucionId");

                    b.HasOne("hotel.Models.Institucion", null)
                        .WithMany("Acompanantes")
                        .HasForeignKey("InstitucionId1");

                    b.Navigation("Institucion");
                });

            modelBuilder.Entity("hotel.Models.Articulos", b =>
                {
                    b.HasOne("hotel.Models.Imagenes", "Imagen")
                        .WithMany()
                        .HasForeignKey("imagenID")
                        .IsRequired();

                    b.Navigation("Imagen");
                });

            modelBuilder.Entity("hotel.Models.Cierre", b =>
                {
                    b.HasOne("hotel.Models.Institucion", null)
                        .WithMany("Cierre")
                        .HasForeignKey("InstitucionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hotel.Models.Usuarios", "Usuario")
                        .WithMany("Cierre")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("hotel.Models.Configuracion", b =>
                {
                    b.HasOne("hotel.Models.Institucion", "Institucion")
                        .WithMany()
                        .HasForeignKey("InstitucionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Configuracion_Institucion");

                    b.Navigation("Institucion");
                });

            modelBuilder.Entity("hotel.Models.Consumo", b =>
                {
                    b.HasOne("hotel.Models.Articulos", "Articulo")
                        .WithMany("Consumo")
                        .HasForeignKey("ArticuloId");

                    b.HasOne("hotel.Models.Movimientos", "Movimientos")
                        .WithMany("Consumo")
                        .HasForeignKey("MovimientosId");

                    b.Navigation("Articulo");

                    b.Navigation("Movimientos");
                });

            modelBuilder.Entity("hotel.Models.CuadreCierre", b =>
                {
                    b.HasOne("hotel.Models.Cierre", "Cierre")
                        .WithMany()
                        .HasForeignKey("CierreId");

                    b.HasOne("hotel.Models.Institucion", "Institucion")
                        .WithMany("CuadreCierre")
                        .HasForeignKey("InstitucionId");

                    b.Navigation("Cierre");

                    b.Navigation("Institucion");
                });

            modelBuilder.Entity("hotel.Models.Egresos", b =>
                {
                    b.HasOne("hotel.Models.Cierre", null)
                        .WithMany("Egresos")
                        .HasForeignKey("CierreID");

                    b.HasOne("hotel.Models.Movimientos", "Movimiento")
                        .WithOne("Egreso")
                        .HasForeignKey("hotel.Models.Egresos", "MovimientoId");

                    b.HasOne("hotel.Models.TipoEgreso", "TipoEgreso")
                        .WithMany("Egresos")
                        .HasForeignKey("TipoEgresoId");

                    b.Navigation("Movimiento");

                    b.Navigation("TipoEgreso");
                });

            modelBuilder.Entity("hotel.Models.Empeño", b =>
                {
                    b.HasOne("hotel.Models.Pagos", "Pago")
                        .WithMany()
                        .HasForeignKey("PagoID");

                    b.HasOne("hotel.Models.Visitas", "Visita")
                        .WithMany()
                        .HasForeignKey("VisitaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pago");

                    b.Navigation("Visita");
                });

            modelBuilder.Entity("hotel.Models.Encargos", b =>
                {
                    b.HasOne("hotel.Models.Articulos", "Articulo")
                        .WithMany("Encargos")
                        .HasForeignKey("ArticuloId");

                    b.HasOne("hotel.Models.Institucion", null)
                        .WithMany("Encargos")
                        .HasForeignKey("InstitucionId");

                    b.HasOne("hotel.Models.Visitas", "Visita")
                        .WithMany("Encargos")
                        .HasForeignKey("VisitaId");

                    b.Navigation("Articulo");

                    b.Navigation("Visita");
                });

            modelBuilder.Entity("hotel.Models.HabitacionCaracteristica", b =>
                {
                    b.HasOne("hotel.Models.Caracteristica", "Caracteristica")
                        .WithMany("HabitacionCaracteristicas")
                        .HasForeignKey("CaracteristicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HabitacionCaracteristicas_Caracteristicas");

                    b.HasOne("hotel.Models.Habitaciones", "Habitacion")
                        .WithMany("HabitacionCaracteristicas")
                        .HasForeignKey("HabitacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HabitacionCaracteristicas_Habitaciones");

                    b.Navigation("Caracteristica");

                    b.Navigation("Habitacion");
                });

            modelBuilder.Entity("hotel.Models.HabitacionImagenes", b =>
                {
                    b.HasOne("hotel.Models.Habitaciones", "Habitacion")
                        .WithMany("HabitacionImagenes")
                        .HasForeignKey("HabitacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HabitacionImagenes_Habitaciones");

                    b.HasOne("hotel.Models.Imagenes", "Imagen")
                        .WithMany("HabitacionImagenes")
                        .HasForeignKey("ImagenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HabitacionImagenes_Imagenes");

                    b.Navigation("Habitacion");

                    b.Navigation("Imagen");
                });

            modelBuilder.Entity("hotel.Models.Habitaciones", b =>
                {
                    b.HasOne("hotel.Models.CategoriasHabitaciones", "Categoria")
                        .WithMany("Habitaciones")
                        .HasForeignKey("CategoriaId")
                        .HasConstraintName("FK_Habitaciones_CategoriasHabitaciones");

                    b.HasOne("hotel.Models.Institucion", null)
                        .WithMany("Habitaciones")
                        .HasForeignKey("InstitucionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hotel.Models.Visitas", "Visita")
                        .WithOne("Habitacion")
                        .HasForeignKey("hotel.Models.Habitaciones", "VisitaID")
                        .HasConstraintName("FK_Habitaciones_Visitas");

                    b.Navigation("Categoria");

                    b.Navigation("Visita");
                });

            modelBuilder.Entity("hotel.Models.HabitacionesVirtuales", b =>
                {
                    b.HasOne("hotel.Models.Habitaciones", "Habitacion1")
                        .WithMany("HabitacionesVirtualesHabitacion1")
                        .HasForeignKey("Habitacion1Id");

                    b.HasOne("hotel.Models.Habitaciones", "Habitacion2")
                        .WithMany("HabitacionesVirtualesHabitacion2")
                        .HasForeignKey("Habitacion2Id");

                    b.Navigation("Habitacion1");

                    b.Navigation("Habitacion2");
                });

            modelBuilder.Entity("hotel.Models.Identity.ApplicationUser", b =>
                {
                    b.HasOne("hotel.Models.Institucion", "Institucion")
                        .WithMany()
                        .HasForeignKey("InstitucionId");

                    b.Navigation("Institucion");
                });

            modelBuilder.Entity("hotel.Models.InventarioGeneral", b =>
                {
                    b.HasOne("hotel.Models.Articulos", "Articulo")
                        .WithMany("InventarioGeneral")
                        .HasForeignKey("ArticuloId");

                    b.Navigation("Articulo");
                });

            modelBuilder.Entity("hotel.Models.InventarioInicial", b =>
                {
                    b.HasOne("hotel.Models.Articulos", "Articulo")
                        .WithOne("InventarioInicial")
                        .HasForeignKey("hotel.Models.InventarioInicial", "ArticuloId")
                        .IsRequired();

                    b.HasOne("hotel.Models.Institucion", null)
                        .WithMany("InventarioInicial")
                        .HasForeignKey("InstitucionId");

                    b.Navigation("Articulo");
                });

            modelBuilder.Entity("hotel.Models.Inventarios", b =>
                {
                    b.HasOne("hotel.Models.Articulos", "Articulo")
                        .WithMany("Inventarios")
                        .HasForeignKey("ArticuloId");

                    b.HasOne("hotel.Models.Habitaciones", "Habitacion")
                        .WithMany("Inventarios")
                        .HasForeignKey("HabitacionId");

                    b.HasOne("hotel.Models.Institucion", null)
                        .WithMany("Inventarios")
                        .HasForeignKey("InstitucionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Articulo");

                    b.Navigation("Habitacion");
                });

            modelBuilder.Entity("hotel.Models.Movimientos", b =>
                {
                    b.HasOne("hotel.Models.Habitaciones", "Habitacion")
                        .WithMany("Movimientos")
                        .HasForeignKey("HabitacionId");

                    b.HasOne("hotel.Models.Pagos", "Pago")
                        .WithMany("Movimientos")
                        .HasForeignKey("PagoId");

                    b.HasOne("hotel.Models.Visitas", "Visita")
                        .WithMany("Movimientos")
                        .HasForeignKey("VisitaId");

                    b.Navigation("Habitacion");

                    b.Navigation("Pago");

                    b.Navigation("Visita");
                });

            modelBuilder.Entity("hotel.Models.MovimientosServicios", b =>
                {
                    b.HasOne("hotel.Models.Movimientos", "Movimientos")
                        .WithMany("MovimientosServicios")
                        .HasForeignKey("MovimientosId");

                    b.HasOne("hotel.Models.ServiciosAdicionales", "Servicio")
                        .WithMany("MovimientosServicios")
                        .HasForeignKey("ServicioId");

                    b.HasOne("hotel.Models.Servicios", null)
                        .WithMany("MovimientosServicios")
                        .HasForeignKey("ServiciosServicioId");

                    b.Navigation("Movimientos");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("hotel.Models.MovimientosStock", b =>
                {
                    b.HasOne("hotel.Models.Articulos", "Articulo")
                        .WithMany("MovimientosStock")
                        .HasForeignKey("ArticuloId");

                    b.HasOne("hotel.Models.Movimientos", "Movimientos")
                        .WithMany("MovimientosStock")
                        .HasForeignKey("MovimientosId");

                    b.HasOne("hotel.Models.TipoMovimiento", "TipoMovimiento")
                        .WithMany("MovimientosStock")
                        .HasForeignKey("TipoMovimientoId");

                    b.Navigation("Articulo");

                    b.Navigation("Movimientos");

                    b.Navigation("TipoMovimiento");
                });

            modelBuilder.Entity("hotel.Models.MovimientosUsuarios", b =>
                {
                    b.HasOne("hotel.Models.Usuarios", "Usuario")
                        .WithMany("MovimientosUsuarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("hotel.Models.Pagos", b =>
                {
                    b.HasOne("hotel.Models.Cierre", "Cierre")
                        .WithMany("Pagos")
                        .HasForeignKey("CierreId");

                    b.HasOne("hotel.Models.Institucion", null)
                        .WithMany("Pagos")
                        .HasForeignKey("InstitucionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hotel.Models.MediosPago", "MedioPago")
                        .WithMany("Pagos")
                        .HasForeignKey("MedioPagoId");

                    b.Navigation("Cierre");

                    b.Navigation("MedioPago");
                });

            modelBuilder.Entity("hotel.Models.Personal", b =>
                {
                    b.HasOne("hotel.Models.Roles", "Rol")
                        .WithMany("Personal")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("hotel.Models.Promociones", b =>
                {
                    b.HasOne("hotel.Models.CategoriasHabitaciones", "Categoria")
                        .WithMany("Promociones")
                        .HasForeignKey("CategoriaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("hotel.Models.Recargos", b =>
                {
                    b.HasOne("hotel.Models.Pagos", "Pago")
                        .WithOne("Recargo")
                        .HasForeignKey("hotel.Models.Recargos", "PagoID")
                        .IsRequired();

                    b.Navigation("Pago");
                });

            modelBuilder.Entity("hotel.Models.Registros", b =>
                {
                    b.HasOne("hotel.Models.Reservas", "Reserva")
                        .WithMany()
                        .HasForeignKey("ReservaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reserva");
                });

            modelBuilder.Entity("hotel.Models.Reservas", b =>
                {
                    b.HasOne("hotel.Models.Habitaciones", "Habitacion")
                        .WithMany("Reservas")
                        .HasForeignKey("HabitacionId");

                    b.HasOne("hotel.Models.Institucion", null)
                        .WithMany("Reservas")
                        .HasForeignKey("InstitucionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hotel.Models.Promociones", "Promocion")
                        .WithMany()
                        .HasForeignKey("PromocionId");

                    b.HasOne("hotel.Models.Visitas", "Visita")
                        .WithMany("Reservas")
                        .HasForeignKey("VisitaId");

                    b.Navigation("Habitacion");

                    b.Navigation("Promocion");

                    b.Navigation("Visita");
                });

            modelBuilder.Entity("hotel.Models.Tarifas", b =>
                {
                    b.HasOne("hotel.Models.CategoriasHabitaciones", "Categoria")
                        .WithMany("Tarifas")
                        .HasForeignKey("CategoriaId");

                    b.HasOne("hotel.Models.DiasSemana", "DiaSemana")
                        .WithMany("Tarifas")
                        .HasForeignKey("DiaSemanaId");

                    b.HasOne("hotel.Models.TipoTarifa", "TipoTarifa")
                        .WithMany("Tarifas")
                        .HasForeignKey("TipoTarifaId");

                    b.Navigation("Categoria");

                    b.Navigation("DiaSemana");

                    b.Navigation("TipoTarifa");
                });

            modelBuilder.Entity("hotel.Models.Usuarios", b =>
                {
                    b.HasOne("hotel.Models.Roles", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("hotel.Models.UsuariosInstituciones", b =>
                {
                    b.HasOne("hotel.Models.Identity.ApplicationUser", null)
                        .WithMany("UsuariosInstituciones")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("hotel.Models.Institucion", "Institucion")
                        .WithMany("UsuariosInstituciones")
                        .HasForeignKey("InstitucionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hotel.Models.Usuarios", "Usuario")
                        .WithMany("UsuariosInstituciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institucion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("hotel.Models.Visitas", b =>
                {
                    b.HasOne("hotel.Models.Habitaciones", null)
                        .WithMany("Visitas")
                        .HasForeignKey("HabitacionesHabitacionId");

                    b.HasOne("hotel.Models.Institucion", null)
                        .WithMany("Visitas")
                        .HasForeignKey("InstitucionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hotel.Models.Articulos", b =>
                {
                    b.Navigation("Consumo");

                    b.Navigation("Encargos");

                    b.Navigation("InventarioGeneral");

                    b.Navigation("InventarioInicial");

                    b.Navigation("Inventarios");

                    b.Navigation("MovimientosStock");
                });

            modelBuilder.Entity("hotel.Models.Caracteristica", b =>
                {
                    b.Navigation("HabitacionCaracteristicas");
                });

            modelBuilder.Entity("hotel.Models.CategoriasHabitaciones", b =>
                {
                    b.Navigation("Habitaciones");

                    b.Navigation("Promociones");

                    b.Navigation("Tarifas");
                });

            modelBuilder.Entity("hotel.Models.Cierre", b =>
                {
                    b.Navigation("Egresos");

                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("hotel.Models.DiasSemana", b =>
                {
                    b.Navigation("Tarifas");
                });

            modelBuilder.Entity("hotel.Models.Habitaciones", b =>
                {
                    b.Navigation("HabitacionCaracteristicas");

                    b.Navigation("HabitacionImagenes");

                    b.Navigation("HabitacionesVirtualesHabitacion1");

                    b.Navigation("HabitacionesVirtualesHabitacion2");

                    b.Navigation("Inventarios");

                    b.Navigation("Movimientos");

                    b.Navigation("Reservas");

                    b.Navigation("Visitas");
                });

            modelBuilder.Entity("hotel.Models.Identity.ApplicationUser", b =>
                {
                    b.Navigation("UsuariosInstituciones");
                });

            modelBuilder.Entity("hotel.Models.Imagenes", b =>
                {
                    b.Navigation("HabitacionImagenes");
                });

            modelBuilder.Entity("hotel.Models.Institucion", b =>
                {
                    b.Navigation("Acompanantes");

                    b.Navigation("Cierre");

                    b.Navigation("CuadreCierre");

                    b.Navigation("Encargos");

                    b.Navigation("Habitaciones");

                    b.Navigation("InventarioInicial");

                    b.Navigation("Inventarios");

                    b.Navigation("Pagos");

                    b.Navigation("Reservas");

                    b.Navigation("UsuariosInstituciones");

                    b.Navigation("Visitas");
                });

            modelBuilder.Entity("hotel.Models.MediosPago", b =>
                {
                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("hotel.Models.Movimientos", b =>
                {
                    b.Navigation("Consumo");

                    b.Navigation("Egreso");

                    b.Navigation("MovimientosServicios");

                    b.Navigation("MovimientosStock");
                });

            modelBuilder.Entity("hotel.Models.Pagos", b =>
                {
                    b.Navigation("Movimientos");

                    b.Navigation("Recargo");
                });

            modelBuilder.Entity("hotel.Models.Roles", b =>
                {
                    b.Navigation("Personal");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("hotel.Models.Servicios", b =>
                {
                    b.Navigation("MovimientosServicios");
                });

            modelBuilder.Entity("hotel.Models.ServiciosAdicionales", b =>
                {
                    b.Navigation("MovimientosServicios");
                });

            modelBuilder.Entity("hotel.Models.TipoEgreso", b =>
                {
                    b.Navigation("Egresos");
                });

            modelBuilder.Entity("hotel.Models.TipoMovimiento", b =>
                {
                    b.Navigation("MovimientosStock");
                });

            modelBuilder.Entity("hotel.Models.TipoTarifa", b =>
                {
                    b.Navigation("Tarifas");
                });

            modelBuilder.Entity("hotel.Models.Usuarios", b =>
                {
                    b.Navigation("Cierre");

                    b.Navigation("MovimientosUsuarios");

                    b.Navigation("UsuariosInstituciones");
                });

            modelBuilder.Entity("hotel.Models.Visitas", b =>
                {
                    b.Navigation("Encargos");

                    b.Navigation("Habitacion");

                    b.Navigation("Movimientos");

                    b.Navigation("Reservas");
                });
#pragma warning restore 612, 618
        }
    }
}
